name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '18'

jobs:
  # Vercel Deployment
  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.vercel.outputs.preview-url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run pre-deployment checks
        run: npm run deploy:check

      - name: Deploy to Vercel
        id: vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: ${{ github.event.inputs.environment == 'staging' && '--prod=false' || '--prod' }}
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Comment deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v8
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ Deployed to Vercel: ${{ steps.vercel.outputs.preview-url }}`
            })

  # Post-deployment health checks
  health-check:
    name: Post-Deployment Health Check
    runs-on: ubuntu-latest
    needs: [deploy-vercel]
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for deployment
        run: sleep 30

      - name: Health check
        run: |
          DEPLOY_URL="${{ needs.deploy-vercel.outputs.preview-url }}"
          if [ -z "$DEPLOY_URL" ]; then
            echo "No deployment URL found, skipping health check"
            exit 0
          fi

          # Basic health check
          curl -f "$DEPLOY_URL" || exit 1

          # Check for psychology-friendly content
          curl -s "$DEPLOY_URL" | grep -q "tiny wins" || echo "Warning: Main content check failed"

      - name: Run post-deployment Lighthouse
        if: github.ref == 'refs/heads/main'
        run: |
          DEPLOY_URL="${{ needs.deploy-vercel.outputs.preview-url }}"
          if [ -n "$DEPLOY_URL" ]; then
            npx lighthouse "$DEPLOY_URL" --output=html --output-path=./lighthouse-production.html --chrome-flags="--headless --no-sandbox"
          fi

      - name: Upload production Lighthouse report
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-production-report
          path: lighthouse-production.html
          retention-days: 30

  # Rollback capability
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-vercel, health-check]
    if: failure() && github.ref == 'refs/heads/main'

    steps:
      - name: Rollback notification
        uses: actions/github-script@v8
        with:
          script: |
            const { owner, repo } = context.repo;
            const sha = context.sha.substring(0, 7);

            await github.rest.issues.create({
              owner,
              repo,
              title: `ðŸš¨ Deployment Rollback Required - ${sha}`,
              body: `
              ## Deployment Failed

              **Commit:** ${context.sha}
              **Workflow:** ${{ github.workflow }}
              **Run:** ${{ github.run_id }}

              The deployment has failed health checks and may require manual rollback.

              ### Next Steps:
              1. Check the workflow logs for detailed error information
              2. Consider rolling back to the previous stable version
              3. Fix the issues and redeploy

              ### Quick Rollback Commands:
              \`\`\`bash
              # Revert the commit and push
              git revert ${context.sha} --no-edit
              git push origin main
              \`\`\`
              `,
              labels: ['urgent', 'deployment', 'rollback']
            });

      - name: Slack notification (if configured)
        if: env.SLACK_WEBHOOK_URL
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"ðŸš¨ Tiny Wins deployment failed and requires attention"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}