# Tiny Wins - Docker Compose Configuration
# Complete development and production environment setup

version: '3.8'

services:
  # =============================================================================
  # Application Service
  # =============================================================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: tiny-wins-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - PORT=3000
      - HOSTNAME=0.0.0.0
    env_file:
      - .env.production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - tiny-wins-network
    volumes:
      - app-data:/app/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tiny-wins.rule=Host(`tiny-wins.local`)"
      - "traefik.http.services.tiny-wins.loadbalancer.server.port=3000"

  # =============================================================================
  # Reverse Proxy (Optional - for production)
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: tiny-wins-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - tiny-wins-network
    profiles:
      - production

  # =============================================================================
  # Database (Optional - for future features)
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: tiny-wins-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: tiny_wins
      POSTGRES_USER: tiny_wins_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_change_me}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - tiny-wins-network
    profiles:
      - database

  # =============================================================================
  # Redis (Optional - for caching and sessions)
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: tiny-wins-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password_change_me}
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - tiny-wins-network
    profiles:
      - cache

  # =============================================================================
  # Monitoring (Optional - for production)
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: tiny-wins-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - tiny-wins-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: tiny-wins-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    ports:
      - "3001:3000"
    networks:
      - tiny-wins-network
    profiles:
      - monitoring

# =============================================================================
# Networks
# =============================================================================
networks:
  tiny-wins-network:
    driver: bridge
    name: tiny-wins-network

# =============================================================================
# Volumes
# =============================================================================
volumes:
  app-data:
    driver: local
    name: tiny-wins-app-data
  postgres-data:
    driver: local
    name: tiny-wins-postgres-data
  redis-data:
    driver: local
    name: tiny-wins-redis-data
  prometheus-data:
    driver: local
    name: tiny-wins-prometheus-data
  grafana-data:
    driver: local
    name: tiny-wins-grafana-data